第三章:基本概念
1 语法:A-区分大小写;
       B-标识符:(变量函数属性名)有字母数字下划线及美元符号,
	首字符不能为数字(多用驼峰式)
       C-注释: //  /**/
       D-严格模式的引入'use strict';
       E-语句
2关键字和保留字:
	A-yield保留字已经被使用,用来实现异步处理;被调用的函数
	  遇到yield就被返回,next()参数接受参数时作为上次yield
	  返回的结果;
3变量:
	A-松散型,var可创建任何类型的变量(创建后可以修改变量所保存值的类型,但不建议)
	B-使用var创建的关键字作为作用域中的局部变量,函数退出后被销毁
而不用var定义,直接进行赋值,作用于将是全局变量
4数据类型:
	A-基本型:undefined null boolean string number	
	B-引用型:object
	C-利用typeof判断基本数据类型：
		a-返回值可以是undefined string boolean number object（包括null 部分正则） 
		  function（Safari 5 及之前版本、Chrome 7 及之前版本在对正则）
	D-undefined：利用var定义但是没有被赋值的变量是undefined，对未初始化的变量执行typeof 操作符会返回undefined 值，而对未声明
的变量执行typeof 操作符同样也会返回undefined 值，而直接操作为初始化的变量比如alert将会抱错
	E-null  null==undefined  //ture
	F-boolean true 不一定等于1，而false 也不一定等于0 注意区分大小写；
      Boolean                   true                      false
      String                 任何非空字符串           ""（空字符串）
      Number           任何非零数字值（包括无穷大）  0和NaN（参见本章后面有关NaN的内容）
      Object               任何对象                       null
      Undefined              n/a不适用                undefined
	    G-number    	
		a-num.toString(n) 将num转化为n进制注意浮点运算的不准确性
		b-parseInt（num）将num转化为十进制
		c-NaN（用isNaN（）判断）任何涉及NaN 的操作都会返回NaN，NaN 与任何值都不相等包括NaN 本身 
		d-Infinity -Infinity（超出表示的最大最小值时）
		e-任何字符串都不能转化为数值isNaN('bule')//ture
		f-number 方法Number() parseInt() parseFloat()
	H-string +进行连接
	I-object：o.hasOwnProperty("name")判断对象的固有属性
		valueOf()：返回对象的字符串、数值或布尔值表示
		instanceof用于检测对象的实力化
5操作符 
	A-一元：++ --  +参数进行类型转化  -负数和转化
	B-位操作符：按位非与或~ & | 异或^ 箭头方向移位<<  >>  无符号右移>>>
	C-布尔操作符 ！ && ||
	D-* /  %  +  -
	E- 关系< >  <=   >= 
	F- ==  ===   !=  !== 
	G-条件 a？b：c
	H- 赋值= += *=  /= %= -=  <<=  >>==
        I-逗号 ，
6语句 
	A-if  do-while 语句是一种后测试循环语句  while 语句属于前测试循环语句 for 语句也是一种前测试循环语句
	B-for-in 语句是一种精准的迭代语句
	C-label语句 使用label 语句可以在代码中添加标签
	D-break和continue语句
	E-with语句的作用是将代码的作用域设置到一个特定的对象中
	F-switch 语句
switch (expression) {
case value: statement
break;
case value: statement
break;
case value: statement
break;
case value: statement
break;

7函数 参数接收市放在一伪个数组对象中，通过arguments访问 没有重载，可以通过arguments实现

第四章 
1基本数据类型：使用栈内存，copy时直接常见副本，不能创建属性（会抱错）
  引用数据类型：使用堆内存，copy时copy的实引用的地址，但是创建对象的属性时可以直接改变内存中的变量

2 执行环境和作用域：

A-每个执行环境都有一个与之关联的变量对象，有全局环境和局部环境两种
内部可以访问外部环境的变量和方法：而外部不能访问局部变量

B-作用于链：代码在环境中执行时，会创建变量对象的一个作用域链，前端就是当前的执行环境的变量对象，
如果这个环境是函数，则将其活动对象（activation object）作为变量对象，活动对
象在最开始时只包含一个变量，即arguments 对象；末端就是全局环境的变量对向；
标识符解析是沿着作用域链一级一级地搜索标识符的过程
	a-有两种方式可以延长作用于链：try catch with语句 ie8中catch不可以
	b-js语言没有块级作用域 向if和for内部，es6中有如let可以实现块级
	c-使用var 声明的变量会自动被添加到最接近的环境中。在函数内部，最接近的环境就是函数的局部
环境；在with 语句中，最接近的环境是函数环境
3 垃圾收集：
执行环境会负责管理代码执行过程中使用的内存。
垃圾收集机制的原理：找出那些不再继续使用的变量，然后释放其占用的内存，垃圾收集器会按照固定的时间间隔
（或代码执行中预定的收集时间）周期性地执行这一操作。
局部变量只在函数执行的过程中存在。垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记
a-标记清除：（标记清除）
	垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。
	去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，
原因是环境中的变量已经无法访问到这些变量了。
	最后，垃圾收集器完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。
完成内存清除工作，销毁那些带标记的值并回收它们所占用的内存空间。
B-引用计数：当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。
如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取
得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0 时，则说明没有办法再访问这
个值了，可以将其占用的内存空间回收回来。（不常用，当有相互调用的情况时会产生永远不会为0的情况）
解决：可以手动解除 变量赋值为null；
4性能问题：垃圾收集是周期运行的
5管理内存：而优化内存占用的最佳方式，就是为执行
中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为null 来释放其引用——这个
做法叫做解除引用（dereferencing）。这一做法适用于大多数全局变量和全局对象的属性。
解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离
执行环境，以便垃圾收集器下次运行时将其回收。

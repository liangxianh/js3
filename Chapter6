第六章 面向对象(Object-Oriented)的程序设计
一 理解对象
1理解对象,new Object实例或者对象的字面量的形式,每个对象包含属性和方法
2属性类型
A 数据属性:包含一个数据值得位置,在这个位置上可以读取和写入值;
拥有四个可以描述其行为的属性:
  a [[Configurable]]:值为true(默认)或false 表示是否可以通过delete删除属性从而进行重新的定义,能否修改属性的特性;
  b [[Enumerable]]: 值为true(默认)或false,表示能否通过for-in循环返回属性;
  c [[writable]]: 值为true(默认)或false,表示能否修改属性的值;
  d [[value]]:默认值为undefined,包含这个属性的数据值,就是在此处写入和读出的;
可以利用Object.defineProperty(属性所在的对象,属性的名字,描述符对象)方法修改默认的特性,其中描述符对象必须是configurable、enumerable、writable 和value。如
 
需要注意的是:一旦将[[Configurable]] 设置为false不可配置的,就不能在变回可配置的了;
B 访问器属性:
访问器属性有如下4 个特性:
  a [[Configurable]]同上
  b  [[Enumerable]]同上
  c [[Get]]：在读取属性时调用的函数。默认值为undefined。
  d [[Set]]：在写入属性时调用的函数。默认值为undefined。
访问器属性不能直接定义，必须使用Object.defineProperty()来定义
3 定义多个属性：
Object.defineProperties(实例对象，{name:{value:''}，set:function(){}，***})
4 读取属性的特性
Object.getOwnPropertyDescriptor(对象，变量名)

二 创建对象

1工厂模式	2构造函数模式	3原型模式
 	 	
工厂模式虽然解决了创建
多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型)
比如Object我可以new多个，然后在绑定不同的对象和方法不是一样的么（同）工程设计模式
	注意:1 使用new;2P大写；3使用this；4没有return；5没有显式的创建对象;

其中new实现了：1创建新对象；2将构造函数的作用域赋值给新对象（this只想这个新对象）；3执行代码返回对象；
有一个constructor（构造函数）属性，该属性指向Person，但一般利用instanceof检测对象；

任何函数，只要通过new 操作符来调用，那它就可以作为构造函数；而任何函数，如果不通过new 操作符来调用，那它跟普通函数也不会有什么两样
存在的问题：每个方法都要在每个实例上重新创建一遍

1-注意:A变量之间先从内部查找;B对原型对象所做的任何修改都能够立即从实例上反映出来（不论创建实例的先后顺序）；C一定不要先创建实例，在重写整个原型对象如下（会抱错）
 
因为把原型修改为另外一个对象就等于切断了构造函数与最初原型之间的联系
2-使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法
3-利用hasOwnProperty()方法检测实例的固有属性(非原型中的属性);
4-可以利用hasPrototypeProper(实例对象,属性名)遍历到原型属性的,返回true/false
5-在做对象的深拷贝时可以如下实现
var cloneObject = {};
for(var key in children){
	if(children,hasOwnProperty(key)){
		cloneObject[key] = children[key];
	}
}
上面是原生方法进行克隆，在angularjs中，利用angular.copy()就可以实现功能
6- Object.keys(实例对象Person.Prototype)实例固有的，（不是从原型中继承来的）可以枚举的
7通过原生对象的原型，不仅可以取得所有默认方法的引用，而且也可以定义新方法；定义的新方法，有效范围是什么，比如String.prototype.sayhello();之后再整个项目中所有的字符串都可以访问这个方法么。还是在一定的范围之内；
8-存在的问题：当原型对象中包含引用对象属性时，其实例中改变对应属性的值将改变其他实例的值，就是深浅拷贝的问题；


4针对原型模式和构造函数模式对应的缺点可以使用两者组合的模式。
构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性
 
5 动态的原型模式，4的变形，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。
6 寄生构造函数模式
7 稳妥构造函数模式（适用于安全模式）

三 继承
1-函数签名包括：
    参数和参数类型；
    一个返回值和类型；可能抛出或回传的异常；
	一个面向对象程序方法的有效性信息；
而上面的这些信息可以用来实现类型的检测，函数重载，接口等等，这些都是js所不具备的东西
js是一种松散型的动态语言，不需要提前声明变量的类型，这些类型在程序运行时将会自动处理；
2-原型链 作为继承的主要方法
默认原型都是Object实例
一个构造函数A通过原型继承另外一个构造函数B(B的实例对象),那么A的实例包含构造函数B的属性和方法,依次继续下去产生的链条就是原型链
SubType.prototype = new SuperType();
3-使用instanceof 操作符确定原型和实例的关系，只要用这个操作符来测试实例与原型链中出现过的构造函数，结果就会返回true
alert(instance instanceof Object);//true
也可以使用 isPrototypeOf（）返回值同上一样，注意和上面用法的不同
alert(instance instanceof Object);
alert(Object.prototype.isPrototypeOf(instance));//true
4-注意
A 定义方法或重写方法一定在替换原型的语句之后;
//继承了SuperType
SubType.prototype = new SuperType();     //替换原型的语句
//添加新方法
SubType.prototype.getSubValue = function (){
	return this.subproperty;
};
//重写超类型中的方法
SubType.prototype.getSuperValue = function (){
	return false;
};
B 通过原型链实现继承时,一定注意不要使用字面量对象创建原型
//继承了SuperType
SubType.prototype = new SuperType();
//使用字面量添加新方法，会导致上一行代码无效,因为重新定义之后切断了指向
SubType.prototype = {
	getSubValue : function (){
		return this.subproperty;
	},
	someOtherMethod : function (){
		return false;
	}
};
C 原型链最大的问题就是,原型中包含引用类型的属性(会被所有实例共享)

5借用构造函数:在子类型构造函数的内部调用父类型构造函数
function SubType(){
	//继承了SuperType,下面可传递参数
	SuperType.call(this);//这句话都作了什么操作
}
问题:没有避免构造函数每个方法都在每个实例中创建一遍的缺点,而且超类对子类是不可见的(不会被单独使用)
6组合继承
是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承
组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，成为JavaScript 中最常用的继承模式, instanceof 和isPrototypeOf()也能够用于识别基于组合继承创建的对象
7原型式继承
object()对传入其中的对象执行了一次浅复制
  
var person = {**};
var anotherPerson = object(person);
var yetAnotherPerson = object(person);
ES5 规范化使用object.create(用作新对象原型的对象,为新对象定义额外属性的对象)
8 寄生式继承
9 寄生组合是继承
